schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CreateProductBrandPayload {
  productBrand: ProductBrand
}

type Mutation {
  createProductBrand(input: CreateProductBrandInput!): CreateProductBrandPayload!
}

type OnCreatedProductBrandPayload {
  productBrand: ProductBrand
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type ProductBrand implements Node {
  id: ID!
  name: String!
}

"A connection to a list of items."
type ProductBrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductBrandsEdge!]
  "A flattened list of the nodes."
  nodes: [ProductBrand!]
}

"An edge in a connection."
type ProductBrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ProductBrand!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  productBrands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ProductBrandFilterInput order: [ProductBrandSortInput!]): ProductBrandsConnection
  productBrandById(id: ID!): ProductBrand!
}

type Subscription {
  onCreatedProductBrand: OnCreatedProductBrandPayload!
}

input CreateProductBrandInput {
  name: String!
}

input ProductBrandFilterInput {
  and: [ProductBrandFilterInput!]
  or: [ProductBrandFilterInput!]
  id: UuidOperationFilterInput
  name: StringOperationFilterInput
}

input ProductBrandSortInput {
  id: SortEnumType
  name: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")