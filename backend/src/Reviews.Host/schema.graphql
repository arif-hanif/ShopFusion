schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CreateReviewPayload {
  review: Review
}

type Mutation {
  createReview(input: CreateReviewInput!): CreateReviewPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Product {
  id: UUID!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: ReviewFilterInput order: [ReviewSortInput!]): ReviewsConnection
  reviewById(id: ID!): Review
  userById(id: ID!): User
  users("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: UserFilterInput order: [UserSortInput!]): UsersConnection
  productById(id: ID!): Product!
}

type Review implements Node {
  id: ID!
  body: String!
  stars: Int!
  author: User!
  product: Product!
}

"A connection to a list of items."
type ReviewsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ReviewsEdge!]
  "A flattened list of the nodes."
  nodes: [Review!]
}

"An edge in a connection."
type ReviewsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Review!
}

type Subscription {
  onCreateReview: Review!
}

type User implements Node {
  id: ID!
  reviews("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ReviewsConnection
}

"A connection to a list of items."
type UsersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UsersEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
}

"An edge in a connection."
type UsersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

input CreateReviewInput {
  body: String!
  stars: Int!
  productId: ID!
  authorId: ID!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfReviewFilterInput {
  all: ReviewFilterInput
  none: ReviewFilterInput
  some: ReviewFilterInput
  any: Boolean
}

input ReviewFilterInput {
  and: [ReviewFilterInput!]
  or: [ReviewFilterInput!]
  id: UuidOperationFilterInput
  body: StringOperationFilterInput
  stars: IntOperationFilterInput
  productId: UuidOperationFilterInput
  authorId: UuidOperationFilterInput
  author: UserFilterInput
}

input ReviewSortInput {
  id: SortEnumType
  body: SortEnumType
  stars: SortEnumType
  productId: SortEnumType
  authorId: SortEnumType
  author: UserSortInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: UuidOperationFilterInput
  reviews: ListFilterInputTypeOfReviewFilterInput
}

input UserSortInput {
  id: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")